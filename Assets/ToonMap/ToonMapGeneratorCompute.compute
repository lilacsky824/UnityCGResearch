#pragma kernel RampMapGenerator
#pragma kernel GradientMapGenerator
#pragma kernel GradientMapPreviewGenerator

RWTexture2D<float4> _RampMap;
float _RampMapResolution;

int _GradientIndex;
bool _ShowAlpha;
int _RemapType;
RWTexture2D<float4> _GradientMap;
Texture2D _PreviewTexture;
RWTexture2D<float4> _GradientMapPreview;
float2 _GradientMapResolution;
float2 _PreviewTextureResolution;

struct GradientKeyData {
    float4 color; // w is Time
    float2 alpha; // w is Time
};
struct GradientParameterData {
    uint colorLength;
    uint alphaLength;
    //uint mode;
};
const uint KeyCount = 8;
StructuredBuffer<GradientKeyData> _GradientKeyData;
StructuredBuffer<GradientParameterData> _GradientParameterData;
float _GradientHardness;

float3 SRGBToLinear(float3 In)
{
    float3 linearRGBLo = In / 12.92;;
    float3 linearRGBHi = pow(max(abs((In + 0.055) / 1.055), 1.192092896e-07), float3(2.4, 2.4, 2.4));
    return float3(In <= 0.04045) ? linearRGBLo : linearRGBHi;
}

float3 LinearToSRGB(float3 In)
{
    float3 sRGBLo = In * 12.92;
    float3 sRGBHi = (pow(max(abs(In), 1.192092896e-07), float3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4)) * 1.055) - 0.055;
    return float3(In <= 0.0031308) ? sRGBLo : sRGBHi;
}

float3 Unity_ColorspaceConversion_RGB_HSV_float(float3 In)
{
    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
    float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
    float D = Q.x - min(Q.w, Q.y);
    float  E = 1e-10;
    return float3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);;
}

float4 Unity_SampleGradient_float(uint index, GradientParameterData Parameter, float Time)
{
    uint baseIndex = index * 8;

    float3 color = _GradientKeyData[baseIndex].color.rgb;

    [unroll]
    for (int c = 1; c < 8; c++) {
        float colorPos = saturate((Time - _GradientKeyData[baseIndex + c - 1].color.w) / (_GradientKeyData[baseIndex + c].color.w - _GradientKeyData[baseIndex + c - 1].color.w)) * step(c, Parameter.colorLength - 1);

        float3 nextColor = _GradientKeyData[baseIndex + c].color.rgb;

        color = lerp(color, nextColor, lerp(colorPos, step(0.01, colorPos), _GradientHardness));
    }

    // Convert back to sRGB space if necessary
    #ifndef UNITY_COLORSPACE_GAMMA
        //color = LinearToSRGB(color);
    #endif

    float alpha = _GradientKeyData[baseIndex].alpha.x;
    [unroll]
    for (int a = 1; a < 8; a++) {
        float alphaPos = saturate((Time - _GradientKeyData[baseIndex + a - 1].alpha.y) / (_GradientKeyData[baseIndex + a].alpha.y - _GradientKeyData[baseIndex + a - 1].alpha.y)) * step(a, Parameter.alphaLength - 1);
        alpha = lerp(alpha, _GradientKeyData[baseIndex + a].alpha.x, lerp(alphaPos, step(0.01, alphaPos), _GradientHardness));
    }

    return float4(color, alpha);
}

[numthreads(8,8,1)]
void RampMapGenerator (uint3 id : SV_DispatchThreadID)
{
    _RampMap.GetDimensions(_RampMapResolution, _RampMapResolution);
    
    float gradientSpreadness = 1.0f - (_RampMapResolution - (float)id.y) / (_RampMapResolution * 2.0f);
    float time = id.x / _RampMapResolution;
    float timeOfColor = smoothstep(1.0f - gradientSpreadness, gradientSpreadness, time);
    _RampMap[id.xy] = Unity_SampleGradient_float(0, _GradientParameterData[0], timeOfColor);
}

[numthreads(8,1,1)]
void GradientMapGenerator (uint3 id : SV_DispatchThreadID)
{
    _GradientMap.GetDimensions(_GradientMapResolution.x, _GradientMapResolution.y);
    
    float time = id.x / _GradientMapResolution;
    int index = id.y;
    float2 resultPos = float2(id.x, (_GradientMapResolution.y - 1) - index);
    _GradientMap[resultPos] = Unity_SampleGradient_float(index, _GradientParameterData[index], time);
}

[numthreads(8,8,1)]
void GradientMapPreviewGenerator (uint3 id : SV_DispatchThreadID)
{
    _GradientMap.GetDimensions(_GradientMapResolution.x, _GradientMapResolution.y);
    _PreviewTexture.GetDimensions(_PreviewTextureResolution.x, _PreviewTextureResolution.y);
    
    float4 previewTextureColor = _PreviewTexture.Load(int3(id.xy, 0));

    float greyscalePreviewTexture = 0;
    //Apply Inverse Gamma 2.2
    previewTextureColor = pow(previewTextureColor, 0.45f);

    switch (_RemapType)
    {
        case 0 : 
        greyscalePreviewTexture = dot(previewTextureColor, float3(0.3, 0.59, 0.11));
        break;

        case 1 : 
        greyscalePreviewTexture = Unity_ColorspaceConversion_RGB_HSV_float(previewTextureColor).r;
        break;

        case 2 : 
        greyscalePreviewTexture = Unity_ColorspaceConversion_RGB_HSV_float(previewTextureColor).g;
        break;

        case 3 : 
        greyscalePreviewTexture = Unity_ColorspaceConversion_RGB_HSV_float(previewTextureColor).b;
        break;

        case 4 : 
        float3 hsv = Unity_ColorspaceConversion_RGB_HSV_float(previewTextureColor);
        greyscalePreviewTexture = hsv.g * hsv.b;
        break;
    }
    

    int2 samplePos = int2(round(greyscalePreviewTexture * _GradientMapResolution.x), _GradientMapResolution.y - (_GradientIndex + 1));
    //Prevent samplePos over _GradientMapResolution.x which will be empty value(black).
    samplePos.x = min(samplePos.x, _GradientMapResolution.x - 1);

    _GradientMapPreview[id.xy] = _GradientMap.Load(samplePos);

    if(_ShowAlpha)
    {
        _GradientMapPreview[id.xy] *= previewTextureColor.a;
    }
}

